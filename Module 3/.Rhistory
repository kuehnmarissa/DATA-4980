p1 <- ggplot(df,aes(x=forcats::fct_rev(period),group=COUNTRY,y=aid_received)) +
geom_point()+
geom_line()+
scale_y_binned(labels=scales::dollar)+
labs(y="Aid Received (USD2009)",x="Time Period",title="Worldwide Aid Received Before and After 2008")+
theme_minimal()+
facet_wrap(~COUNTRY,ncol=6)
p1
df <- recipient_beforeafter_joined %>% filter(is.na(period)|period=="Before")
p_before <- ggplot(df) +
geom_sf(aes(fill=aid_received)) +
scale_fill_gradient(low="navy",high="gold",na.value = "grey70",labels=scales::dollar)+
labs(title="Worldwide Aid Received (1991-2007)",fill="Aid Received")
df <- recipient_beforeafter_joined %>% filter(is.na(period)|period=="After")
p_after <- ggplot(df) +
geom_sf(aes(fill=aid_received)) +
scale_fill_gradient(low="navy",high="gold",na.value = "grey70",labels=scales::dollar)+
labs(title="Worldwide Aid Received (2008-2010)",fill="Aid Received")
p_before
p_after
View(recipient_beforeafter_joined)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(sf)
aid <- read.csv("~/Y4-25-Spring/DATA 4980 Data Visualization/Module 3/Aid Data Example - Sheet1.csv")
aid_agg <- aid %>%
group_by(year,donor,recipient) %>%
summarize(total_commitment = sum(commitment_amount_usd_constant))
aid_world <- aid_agg %>%
group_by(year) %>%
summarize(total_commitment=sum(total_commitment))
p <- ggplot(aid_world,aes(x=year,y=total_commitment))+
geom_line()+
scale_y_continuous(labels = scales::dollar)+
labs(title="Total Aid Awarded in the World (1991-2010)",x="Year",y="Aid Amount (USD2009)")+
theme_minimal()
p
aid_beforeafter_donor <- aid_agg %>% filter(year>=2005) %>%
mutate(period=ifelse(year<2008,'Before','After')) %>%
group_by(donor,period) %>%
summarize(aid_given=sum(total_commitment)) %>%
arrange(desc(period))
world_map <- read_sf("~/Y4-25-Spring/DATA 4980 Data Visualization/Module 3/World_Countries_(Generalized)_9029012925078512962.geojson")
aid_beforeafter_donor <- aid_beforeafter_donor %>%
mutate(COUNTRY=donor)
donor_beforeafter_joined <- world_map %>%
left_join(aid_beforeafter_donor)
df <- donor_beforeafter_joined %>% filter(is.na(period)|period=="Before")
p_before <- ggplot(df) +
geom_sf(aes(fill=aid_given)) +
scale_fill_gradient(low="navy",high="gold",na.value = "grey70",labels=scales::dollar)+
labs(title="Worldwide Aid Commitments (2005-2007)",fill="Aid Commitment")
df <- donor_beforeafter_joined %>% filter(is.na(period)|period=="After")
p_after <- ggplot(df) +
geom_sf(aes(fill=aid_given)) +
scale_fill_gradient(low="navy",high="gold",na.value = "grey70",labels=scales::dollar)+
labs(title="Worldwide Aid Commitments (2008-2010)",fill="Aid Commitment")
p_before
p_after
df <- filter(donor_beforeafter_joined,!is.na(aid_given))
p1 <- ggplot(df,aes(x=forcats::fct_rev(period),group=COUNTRY,y=aid_given)) +
geom_point()+
geom_line()+
scale_y_continuous(breaks = seq(0, 150000000, by = 20000000),labels=scales::dollar)+
labs(y="Aid Contribution (USD2009)",x="Time Period",title="Worldwide Aid Commitments (2005-2010)",subtitle="Before and After 2008")+
theme_minimal()+
facet_wrap(~COUNTRY,ncol=6)
p1
t.test(aid_beforeafter_donor$period)
df <- aid_agg %>% filter(year>=2005) %>% mutate(period=ifelse(year<2008,'Before','After')) %>% group_by(donor)
View(df)
View(aid_agg)
donor_ttest <- aid_agg %>%
filter(year>=2005) %>%
mutate(period=ifelse(year<2008,'Before','After')) %>%
t.test(total_commitment ~ period,alternative="two.sided")
donor_ttest <- aid_agg %>%
filter(year>=2005) %>%
mutate(period=ifelse(year<2008,'Before','After')) %>% group_by(donor) %>%
t.test(total_commitment ~ period,alternative="two.sided")
donor_ttest <- aid_agg %>%
filter(year>=2005) %>%
mutate(period=ifelse(year<2008,'Before','After')) %>%
t.test(total_commitment ~ period,alternative="two.sided")
donor_ttest
donor_ttest <- aid_agg %>%
filter(year>=2005) %>%
mutate(period=ifelse(year<2008,'Before','After')) %>%
t.test(total_commitment ~ period,alternative="two.sided")
donor_ttest <- aid_agg %>%
filter(year>=2005) %>%
mutate(period=ifelse(year<2008,'Before','After')) %>%
t.test(period ~ total_commitment ,alternative="two.sided")
donor_ttest <- aid_agg %>%
filter(year>=2005) %>%
mutate(period=ifelse(year<2008,'Before','After')) %>%
t.test(country ~ total_commitment ,alternative="two.sided")
donor_ttest <- aid_agg %>%
filter(year>=2005) %>%
mutate(period=ifelse(year<2008,'Before','After')) %>%
t.test(total_commitment ~ donor ,alternative="two.sided")
t.test(total_commitment ~ donor,
data=aid_agg %>% filter(year>=2005) %>% mutate(period=ifelse(year<2008,'Before','After')))
t.test(total_commitment ~ period,
data=aid_agg %>% filter(year>=2005) %>% mutate(period=ifelse(year<2008,'Before','After')))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(sf)
aid <- read.csv("~/Y4-25-Spring/DATA 4980 Data Visualization/Module 3/Aid Data Example - Sheet1.csv")
aid_agg <- aid %>%
group_by(year,donor,recipient) %>%
summarize(total_commitment = sum(commitment_amount_usd_constant))
aid_world <- aid_agg %>%
group_by(year) %>%
summarize(total_commitment=sum(total_commitment))
p <- ggplot(aid_world,aes(x=year,y=total_commitment))+
geom_line()+
scale_y_continuous(labels = scales::dollar)+
labs(title="Total Aid Awarded in the World (1991-2010)",x="Year",y="Aid Amount (USD2009)")+
theme_minimal()
p
aid_beforeafter_donor <- aid_agg %>% filter(year>=2005) %>%
mutate(period=ifelse(year<2008,'Before','After')) %>%
group_by(donor,period) %>%
summarize(aid_given=sum(total_commitment)) %>%
arrange(desc(period))
world_map <- read_sf("~/Y4-25-Spring/DATA 4980 Data Visualization/Module 3/World_Countries_(Generalized)_9029012925078512962.geojson")
aid_beforeafter_donor <- aid_beforeafter_donor %>%
mutate(COUNTRY=donor)
donor_beforeafter_joined <- world_map %>%
left_join(aid_beforeafter_donor)
df <- donor_beforeafter_joined %>% filter(is.na(period)|period=="Before")
p_before <- ggplot(df) +
geom_sf(aes(fill=aid_given)) +
scale_fill_gradient(low="navy",high="gold",na.value = "grey70",labels=scales::dollar)+
labs(title="Worldwide Aid Commitments (2005-2007)",fill="Aid Commitment")
df <- donor_beforeafter_joined %>% filter(is.na(period)|period=="After")
p_after <- ggplot(df) +
geom_sf(aes(fill=aid_given)) +
scale_fill_gradient(low="navy",high="gold",na.value = "grey70",labels=scales::dollar)+
labs(title="Worldwide Aid Commitments (2008-2010)",fill="Aid Commitment")
p_before
p_after
df <- filter(donor_beforeafter_joined,!is.na(aid_given))
p1 <- ggplot(df,aes(x=forcats::fct_rev(period),group=COUNTRY,y=aid_given)) +
geom_point()+
geom_line()+
scale_y_continuous(breaks = seq(0, 150000000, by = 20000000),labels=scales::dollar)+
labs(y="Aid Contribution (USD2009)",x="Time Period",title="Worldwide Aid Commitments (2005-2010)",subtitle="Before and After 2008")+
theme_minimal()+
facet_wrap(~COUNTRY,ncol=6)
p1
aid_beforeafter_recipient <- aid_agg %>% filter(year>=2005) %>%
mutate(period=ifelse(year<2008,'Before','After')) %>%
group_by(recipient,period) %>%
summarize(aid_received=sum(total_commitment)) %>%
arrange(desc(period))
world_map <- read_sf("~/Y4-25-Spring/DATA 4980 Data Visualization/Module 3/World_Countries_(Generalized)_9029012925078512962.geojson")
aid_beforeafter_recipient <- aid_beforeafter_recipient %>%
mutate(COUNTRY=recipient)
recipient_beforeafter_joined <- world_map %>%
left_join(aid_beforeafter_recipient)
df <- recipient_beforeafter_joined %>% filter(is.na(period)|period=="Before")
p_before <- ggplot(df) +
geom_sf(aes(fill=aid_received)) +
scale_fill_gradient(low="navy",high="gold",na.value = "grey70",labels=scales::dollar)+
labs(title="Worldwide Aid Received (2005-2007)",fill="Aid Received")
df <- recipient_beforeafter_joined %>% filter(is.na(period)|period=="After")
p_after <- ggplot(df) +
geom_sf(aes(fill=aid_received)) +
scale_fill_gradient(low="navy",high="gold",na.value = "grey70",labels=scales::dollar)+
labs(title="Worldwide Aid Received (2008-2010)",fill="Aid Received")
p_before
p_after
df <- filter(recipient_beforeafter_joined,!is.na(aid_received))
p1 <- ggplot(df,aes(x=forcats::fct_rev(period),group=COUNTRY,y=aid_received)) +
geom_point()+
geom_line()+
scale_y_continuous(breaks = seq(0, 5000000, by = 20000000),labels=scales::dollar)+
labs(y="Aid Received (USD2009)",x="Time Period",title="Worldwide Aid Received (2005-2010)",subtitle="Before and After 2008")+
theme_minimal()+
facet_wrap(~COUNTRY,ncol=4)
p1
setwd("~/Y4-25-Spring/DATA 4980 Data Visualization/Module 3")
knitr::opts_chunk$set(echo = TRUE)
library(readr) # for .txt and .csv files
library(readxl) # for .xlsx(excel files)
library(haven) # for .dta(stata files) and .sav(spss files) and .sas7bdat(sas files)
# import data from a comma delimited file (.csv)
salaries_csv <- read.csv("~/Y4-25-Spring/DATA 4980 Data Visualization/Module 3/Salaries.csv")
# import data from a tab delimited file (.txt)
Salaries_txt <- read.delim("~/Y4-25-Spring/DATA 4980 Data Visualization/Module 3/Salaries.txt")
# import data from an Excel workbook
Salaries_xlsx <- read_excel("~/Y4-25-Spring/DATA 4980 Data Visualization/Module 3/Salaries.xlsx", sheet=1)
# import data from Stata
Salaries_stata <- read_dta("~/Y4-25-Spring/DATA 4980 Data Visualization/Module 3/Salaries.dta")
# import data from SPSS
Salaries_spss <- read_sav("~/Y4-25-Spring/DATA 4980 Data Visualization/Module 3/Salaries.sav")
# import data from SAS
Salaries_sas <- read_sas("~/Y4-25-Spring/DATA 4980 Data Visualization/Module 3/Salaries.sas7bdat")
# import data from a comma delimited file (.csv)
salaries_csv <- read.csv("~/Y4-25-Spring/DATA 4980 Data Visualization/Module 3/Salaries.csv")
View(salaries_csv)
# selecting columns by name. The dplyr packages allow you to do this more effectively
salaries <- salaries_csv[, c("discipline", "yrs.since.phd", "yrs.service", "sex", "salary" )]
# selecting based on condition
salaries_old <- salaries[which(salaries$yrs.since.phd > 20),]
# recoding variables
salaries$months.since.phd <- salaries$yrs.since.phd * 12
salaries_months <- salaries
salaries_months$yrs.since.phd <- NULL
# drop missing values (there are ways to impute missing data including nearest neighbor or linear interpolation, which should be covered in Data Science II)
salaries_nomissing <- na.omit(salaries_months)
# Create an categorical variable for whether a professor is old or not
salaries$tenure <- ifelse(salaries$yrs.since.phd >= 20, "old_professor", "new_professor")
View(salaries)
library(ggplot2)
# Let's observe the relationship between a professor's numbers_of_yrs_since_phd and their salary
# This initates the graph -- it gives a blank canvas with the variables
ggplot(data = salaries, mapping = aes(x = yrs.since.phd, y = salary))
# Geoms are the geometric objects (points, lines, bars, etc.) that can be placed on a graph. They are added using functions that start with geom_.
# In this example, we’ll add points using the geom_point function, creating a scatterplot.
ggplot(data = salaries, mapping = aes(x = yrs.since.phd, y = salary)) +
geom_point()
# Options for the geom_point function include color, size, and alpha. These control the point color, size, and transparency, respectively.
# Transparency ranges from 0 (completely transparent) to 1 (completely opaque). Adding a degree of transparency can help visualize overlapping points.
ggplot(data = salaries, mapping = aes(x = yrs.since.phd, y = salary)) +
geom_point(color = "cornflowerblue", alpha = .7, size = 2)
# Next, let’s add a line of best fit. We can do this with the geom_smooth function. Options control the type of
# line (linear, quadratic, nonparametric), the thickness of the line, the line’s color, and the presence or absence of a
# confidence interval. Here we request a linear regression (method = lm) line (where lm stands for linear model).
ggplot(data = salaries, mapping = aes(x = yrs.since.phd, y = salary)) +
geom_point(color = "cornflowerblue", alpha = .7, size = 2) +
geom_smooth(method = "lm")
# In addition to mapping variables to the x and y axes, variables can be mapped to the color, shape, size, transparency,
# and other visual characteristics of geometric objects. This allows groups of observations to be superimposed in a single graph by color.
ggplot(data = salaries, mapping = aes(x = yrs.since.phd, y = salary, color=sex)) +
geom_point(alpha = .7, size = 2) +
geom_smooth(method = "lm", size = 1.5)
# Scales control how variables are mapped to the visual characteristics of the plot. Scale functions (which start with scale_)
# allow you to modify this mapping. In the next plot, we’ll change the x and y axis scaling, and the colors employed.
ggplot(data = salaries, mapping = aes(x = yrs.since.phd, y = salary, color=sex)) +
geom_point(alpha = .7, size = 2) +
geom_smooth(method = "lm") +
scale_x_continuous(breaks = seq(0, 70, 10)) +
scale_y_continuous(breaks = seq(0, 200000, 20000), label = scales::dollar) +
scale_color_manual(values = c("indianred3",  "cornflowerblue"))
ggplot(data = salaries, mapping = aes(x = yrs.since.phd, y = salary, color=sex)) +
geom_point(alpha = .7, size = 2) +
geom_smooth(method = "lm") +
scale_x_continuous(breaks = seq(0, 70, 10)) +
scale_y_continuous(breaks = seq(0, 200000, 20000), label = scales::dollar) +
scale_color_manual(values = c("indianred3",  "cornflowerblue"))+
facet_wrap(~discipline)
# add informative labels
ggplot(data = salaries, mapping = aes(x = yrs.since.phd, y = salary, color=sex)) +
geom_point(alpha = .7, size = 2) +
geom_smooth(method = "lm") +
scale_x_continuous(breaks = seq(0, 70, 10)) +
scale_y_continuous(breaks = seq(0, 200000, 20000), label = scales::dollar) +
scale_color_manual(values = c("indianred3",  "cornflowerblue"))+
facet_wrap(~discipline) +
labs(title = "Progression of Salaries of Professors Years after PhD Completion",
subtitle = "9 month academic salaries of 397 college professors at a single institution in 2008-2009",
caption = "source: Salaries-dataset in R",
x = " Time since Phd Completion (years)", y = "9 month salary", color = "Sex")
# add themes to the data
ggplot(data = salaries, mapping = aes(x = yrs.since.phd, y = salary, color=sex)) +
geom_point(alpha = .7, size = 2) +
geom_smooth(method = "lm") +
scale_x_continuous(breaks = seq(0, 70, 10)) +
scale_y_continuous(breaks = seq(0, 200000, 20000), label = scales::dollar) +
scale_color_manual(values = c("indianred3",  "cornflowerblue"))+
facet_wrap(~discipline) +
labs(title = "Progression of Salaries of Professors Years after PhD Completion",
subtitle = "9 month academic salaries of 397 college professors at a single institution in 2008-2009",
caption = "source: Salaries-dataset in R",
x = " Time since Phd Completion (years)", y = "9 month salary", color = "Sex")+
theme_minimal()
# In the examples above, the data and mapping options were placed in this function. In this case
# they apply to each geom_ function that follows. You can also place these options directly
# within a geom. In that case, they only apply only to that specific geom.
ggplot(data = salaries, mapping = aes(x = yrs.since.phd, y = salary, color=sex)) +
geom_point(alpha = .7, size = 2) +
geom_smooth(method = "lm") +
scale_x_continuous(breaks = seq(0, 70, 10)) +
scale_y_continuous(breaks = seq(0, 200000, 20000), label = scales::dollar) +
scale_color_manual(values = c("indianred3",  "cornflowerblue"))+
facet_wrap(~discipline) +
labs(title = "Progression of Salaries of Professors Years after PhD Completion",
subtitle = "9 month academic salaries of 397 college professors at a single institution in 2008-2009",
caption = "source: Salaries-dataset in R",
x = " Time since Phd Completion (years)", y = "9 month salary", color = "Sex")+
theme_minimal()
# In the examples above, the data and mapping options were placed in this function. In this case
# they apply to each geom_ function that follows. You can also place these options directly
# within a geom. In that case, they only apply only to that specific geom.
ggplot(data = salaries, mapping = aes(x = yrs.since.phd, y = salary)) +
geom_point(alpha = .7, size = 2, aes(color=sex)) +
geom_smooth(method = "lm") +
scale_x_continuous(breaks = seq(0, 70, 10)) +
scale_y_continuous(breaks = seq(0, 200000, 20000), label = scales::dollar) +
scale_color_manual(values = c("indianred3",  "cornflowerblue"))+
facet_wrap(~discipline) +
labs(title = "Progression of Salaries of Professors Years after PhD Completion",
subtitle = "9 month academic salaries of 397 college professors at a single institution in 2008-2009",
caption = "source: Salaries-dataset in R",
x = " Time since Phd Completion (years)", y = "9 month salary", color = "Sex")+
theme_minimal()
library(ggplot2)
# Import the Marriage dataset
data(Marriage, package="mosaicData")
install.packages("mosaicData")
library(ggplot2)
# Import the Marriage dataset
data(Marriage, package="mosaicData")
force(Marriage)
View(Marriage)
ggplot(data=Marriage, mapping = aes(x=race)) +
geom_bar()
# plot the distribution of race with modified colors using "fill" and "color", and labels
ggplot(data=Marriage, mapping = aes(x=race)) +
geom_bar(fill = "gold",  color="black") +
labs(y = "Frequency", x = "Race", title = "Participants by race")
# plot the distribution of race with be bar heights as percentages
ggplot(data=Marriage, mapping = aes(x = race, y = after_stat(count/sum(count)))) +
geom_bar(fill = "gold",  color="black") +
labs(x = "Race", y = "Frequency", title = "Participants by race in Percentages") +
scale_y_continuous()
# plot the distribution of race with be bar heights as percentages
ggplot(data=Marriage, mapping = aes(x=race, y = after_stat(count/sum(count)))) +
geom_bar(fill = "gold",  color="black") +
labs(x = "Race", y = "Frequency", title = "Participants by race in Percentages") +
scale_y_continuous(breaks = seq(0, 1, .1), labels = scales::percent)
# calculate number of participants in each race category
library(dplyr)
plotdata <- Marriage %>% count(race)
plotdata
# plot the bars in ascending order
ggplot(plotdata, aes(x = race, y = n)) +
geom_bar(stat="identity") +
labs(x = "Race", y = "Frequency", title  = "Participants by race in no particular order")
# plot the bars in ascending order
ggplot(plotdata, aes(x = reorder(race, n), y = n)) +
geom_bar(stat="identity") +
labs(x = "Race", y = "Frequency", title  = "Participants by race")
# plot the bars backwards with numeric labels
ggplot(plotdata, aes(x = reorder(race, -n), y = n)) +
geom_bar(stat="identity") +
geom_text(aes(label = n), vjust=-0.5) +
labs(x = "Race", y = "Frequency", title  = "Participants by race")
library(dplyr)
plotdata <- Marriage %>% count(race) %>% mutate(pct = n / sum(n), pctlabel = paste0(round(pct*100), "%"))
# plot the bars as percentages,
# in decending order with bar labels
ggplot(plotdata, aes(x = reorder(race, -pct), y = pct)) +
geom_bar(stat="identity", fill="gold", color="black") +
geom_text(aes(label = pctlabel), vjust=-0.25) +
scale_y_continuous(labels = scales::percent) +
labs(x = "Race", y = "Percent", title  = "Participants by race")
ggplot(Marriage, aes(x=officialTitle)) +
geom_bar() +
labs(x = "Officiate", y = "Frequency", title = "Marriages by officiate")
# bar chart with rotated labels
ggplot(Marriage, aes(x=officialTitle)) +
geom_bar() +
labs(x = "", y = "Frequency", title = "Marriages by officiate") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# create a basic ggplot2 pie chart
library(ggpie)
ggpie(Marriage, group_key="race", count_type = "full",label_type = "none") # You may also try ggdonut with the same parameters
ggpie(Marriage, group_key = "race", count_type = "full", label_info = "all", label_type = "circle", label_size = 4, label_pos = "out", label_split = NULL) #label_type = "horizon", label_threshold = 10
ggrosepie(Marriage, group_key = "race", count_type = "full", label_info = "all", show_tick=F,donut_frac=0.3,donut_label_size=3)
library(treemapify) # for geom_treemap() #I could not install this package, so I don;t know if there are errors here
# Create the treemap of population to area size, mapping life expectancy to fill color, labelled with country names
ggplot(gapminder[which(gapminder$year==2000),], aes( area = pop, fill = lifeExp, label = country)) +
geom_treemap() + # create a treemap
geom_treemap_text(aes(label = country), colour = "white", place = "centre", grow = TRUE) +  # Add text to treemap
scale_fill_viridis_c() +   # Use a color scale for life expectancy
labs(title = "Treemap of Population by Country (2007)", subtitle = "Colored by Life Expectancy", fill = "Life Expectancy") +
theme_minimal()
library(treemapify) # for geom_treemap() #I could not install this package, so I don;t know if there are errors here
# Create the treemap of population to area size, mapping life expectancy to fill color, labelled with country names
data(gapminder)
ggplot(gapminder[which(gapminder$year==2000),], aes( area = pop, fill = lifeExp, label = country)) +
geom_treemap() + # create a treemap
geom_treemap_text(aes(label = country), colour = "white", place = "centre", grow = TRUE) +  # Add text to treemap
scale_fill_viridis_c() +   # Use a color scale for life expectancy
labs(title = "Treemap of Population by Country (2007)", subtitle = "Colored by Life Expectancy", fill = "Life Expectancy") +
theme_minimal()
# Create the treemap of population to area size, mapping life expectancy to fill color, labelled with country names
library(gapminder)
library(treemapify) # for geom_treemap() #I could not install this package, so I don;t know if there are errors here
# Create the treemap of population to area size, mapping life expectancy to fill color, labelled with country names
library(gapminder)
data("gapminder")
ggplot(gapminder[which(gapminder$year==2000),], aes( area = pop, fill = lifeExp, label = country)) +
geom_treemap() + # create a treemap
geom_treemap_text(aes(label = country), colour = "white", place = "centre", grow = TRUE) +  # Add text to treemap
scale_fill_viridis_c() +   # Use a color scale for life expectancy
labs(title = "Treemap of Population by Country (2007)", subtitle = "Colored by Life Expectancy", fill = "Life Expectancy") +
theme_minimal()
# create a treemap of marriage officials
plotdata <- Marriage %>% count(officialTitle)
ggplot(plotdata, aes(fill = officialTitle, area = n)) +
geom_treemap() +
labs(title = "Marriages by officiate")
library(treemapify) # for geom_treemap() #I could not install this package, so I don;t know if there are errors here
# Create the treemap of population to area size, mapping life expectancy to fill color, labelled with country names
library(gapminder)
data("gapminder")
ggplot(gapminder[which(gapminder$year==2000),], aes( area = pop, fill = lifeExp, label = country)) +
geom_treemap() + # create a treemap
geom_treemap_text(aes(label = country), colour = "white", place = "centre", grow = TRUE) +  # Add text to treemap
labs(title = "Treemap of Population by Country (2007)", subtitle = "Colored by Life Expectancy", fill = "Life Expectancy") +
theme_minimal()
library(treemapify) # for geom_treemap() #I could not install this package, so I don;t know if there are errors here
# Create the treemap of population to area size, mapping life expectancy to fill color, labelled with country names
library(gapminder)
data("gapminder")
ggplot(gapminder[which(gapminder$year==2000),], aes( area = pop, fill = lifeExp, label = country)) +
geom_treemap() + # create a treemap
geom_treemap_text(aes(label = country), colour = "white", place = "centre", grow = TRUE) +  # Add text to treemap
scale_fill_viridis_c() +   # Use a color scale for life expectancy
labs(title = "Treemap of Population by Country (2007)", subtitle = "Colored by Life Expectancy", fill = "Life Expectancy") +
theme_minimal()
library(treemapify) # for geom_treemap() #I could not install this package, so I don;t know if there are errors here
# Create the treemap of population to area size, mapping life expectancy to fill color, labelled with country names
library(gapminder)
data("gapminder")
ggplot(gapminder[which(,gapminder$year==2000)], aes(area = pop, fill = lifeExp, label = country)) +
geom_treemap() + # create a treemap
geom_treemap_text(aes(label = country), colour = "white", place = "centre", grow = TRUE) +  # Add text to treemap
scale_fill_viridis_c() +   # Use a color scale for life expectancy
labs(title = "Treemap of Population by Country (2007)", subtitle = "Colored by Life Expectancy", fill = "Life Expectancy") +
theme_minimal()
library(treemapify) # for geom_treemap() #I could not install this package, so I don;t know if there are errors here
# Create the treemap of population to area size, mapping life expectancy to fill color, labelled with country names
library(gapminder)
data("gapminder")
ggplot(gapminder[which(gapminder$year==2000),], aes(area = pop, fill = lifeExp, label = country)) +
geom_treemap() + # create a treemap
geom_treemap_text(aes(label = country), colour = "white", place = "centre", grow = TRUE) +  # Add text to treemap
scale_fill_viridis_c() +   # Use a color scale for life expectancy
labs(title = "Treemap of Population by Country (2007)", subtitle = "Colored by Life Expectancy", fill = "Life Expectancy") +
theme_minimal()
# create a treemap with tile labels
ggplot(plotdata,  aes(fill = officialTitle, area = n, label = officialTitle)) +
geom_treemap() +
geom_treemap_text(colour = "white", place = "centre") +
labs(title = "Marriages by officiate") +
theme(legend.position = "none")
library(treemapify) # for geom_treemap() #I could not install this package, so I don;t know if there are errors here
# Create the treemap of population to area size, mapping life expectancy to fill color, labelled with country names
library(gapminder)
data("gapminder")
ggplot(gapminder[which(gapminder$year==2000),], aes(area = pop, fill = lifeExp, label = country)) +
geom_treemap() + # create a treemap
geom_treemap_text(aes(label = country), colour = "white", place = "centre", grow = TRUE) +  # Add text to treemap
scale_fill_viridis_c() +   # Use a color scale for life expectancy
labs(title = "Treemap of Population by Country (2007)", subtitle = "Colored by Life Expectancy", fill = "Life Expectancy") +
theme_minimal()
library(treemapify) # for geom_treemap() #I could not install this package, so I don;t know if there are errors here
# Create the treemap of population to area size, mapping life expectancy to fill color, labelled with country names
library(gapminder)
data("gapminder")
ggplot(gapminder[which(gapminder$year==2001),], aes(area = pop, fill = lifeExp, label = country)) +
geom_treemap() + # create a treemap
geom_treemap_text(aes(label = country), colour = "white", place = "centre", grow = TRUE) +  # Add text to treemap
scale_fill_viridis_c() +   # Use a color scale for life expectancy
labs(title = "Treemap of Population by Country (2007)", subtitle = "Colored by Life Expectancy", fill = "Life Expectancy") +
theme_minimal()
library(treemapify) # for geom_treemap() #I could not install this package, so I don;t know if there are errors here
# Create the treemap of population to area size, mapping life expectancy to fill color, labelled with country names
library(gapminder)
data("gapminder")
ggplot(gapminder[which(gapminder$year==2007),], aes(area = pop, fill = lifeExp, label = country)) +
geom_treemap() + # create a treemap
geom_treemap_text(aes(label = country), colour = "white", place = "centre", grow = TRUE) +  # Add text to treemap
scale_fill_viridis_c() +   # Use a color scale for life expectancy
labs(title = "Treemap of Population by Country (2007)", subtitle = "Colored by Life Expectancy", fill = "Life Expectancy") +
theme_minimal()
# plot the age distribution using a histogram
ggplot(Marriage, aes(x = age)) +
geom_histogram() +
labs(title = "Participants by age", x = "Age")
# plot the age distribution using a histogram
ggplot(Marriage, aes(x = age)) +
geom_histogram(fill='orange', color='white') +
labs(title = "Participants by age", x = "Age")
ggplot(Marriage, aes(x = age, y= after_stat(count/sum(count)))) +
geom_histogram(fill = "cornflowerblue", color = "white", binwidth = 5) +
labs(title="Participants by age", y = "Percent", x = "Age") +
scale_y_continuous(labels = scales::percent)
# Create a kernel density plot of age
ggplot(Marriage, aes(x = age)) +
geom_density() +
labs(title = "Participants by age")
# Create a kernel density plot of age
ggplot(Marriage, aes(x = age)) +
geom_density(fill = "indianred3") +
labs(title = "Participants by age")
# Create a kernel density plot of age
ggplot(Marriage, aes(x = age)) +
geom_density(fill = "deepskyblue",
bw = 1) +
labs(title = "Participants by age",
subtitle = "bandwidth = 1")
# create a basic ggplot2 pie chart
library(ggpie)
ggdonut(Marriage, group_key="race", count_type = "full",label_type = "none") # You may also try ggdonut with the same parameters
setwd("~/Y4-25-Spring/DATA 4980 Data Visualization/DATA-4980/Module 3")
